---
- name: Create rule directory
  file:
    path: "{{ firewall_rules_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  tags: firewall, install, firewall:install

- name: Create init script
  template:
    src: init-script.j2
    dest: /etc/init.d/firewall
    owner: root
    group: root
    mode: 0744
  tags: firewall, install, firewall:install

- name: Copy default rules
  include_vars: "{{ firewall_default_file }}"
  tags: firewall, configure, firewall:configure

- name: Get files in rule directory
  command: ls -1 {{ firewall_rules_dir }}
  register: ruledir
  changed_when: false
  tags: firewall, configure, firewall:configure

- name: Delete old rule fragments
  file: path={{ item }} state=absent
  with_items: >-
    {%- set default_rules =  firewall_default_rules|map_to_list('position', 'custom_rules') %}
    {%- set rules = default_rules + firewall_rules %}
    {%- set files = ruledir.stdout_lines %}
    {%- for position in rules|map(attribute='position') %}
      {%- set posfile = ((position|string).split()|first) + '.rule' %}
      {%- if posfile in files %}
        {%- set _ = files.remove(posfile) %}
      {%- endif %}
    {%- endfor %}
    {%- set listfiles = [] %}
    {%- if firewall_whitelist is defined %}
      {%- set _ = listfiles.append(firewall_whitelist_pos+'.rule') %}
    {%- endif %}
    {%- if firewall_blacklist is defined %}
      {%- set _ = listfiles.append(firewall_blacklist_pos+'.rule') %}
    {%- endif %}
    {%- set comma = joiner(",") -%}
    [{% for file in files if file not in listfiles -%}
      {{ comma() }}"{{ firewall_rules_dir+file }}"
    {%- endfor %}]
  when: firewall_clear_rules == true
  tags: firewall, configure, firewall:configure

- name: Create whitelist fragment
  template:
    src: whitelist.j2
    dest: "{{ firewall_rules_dir }}{{ firewall_whitelist_pos }}.rule"
    owner: root
    group: root
    mode: 0644
  when: firewall_whitelist is defined
  tags: firewall, configure, firewall:configure

- name: Create blacklist fragment
  template:
    src: blacklist.j2
    dest: "{{ firewall_rules_dir }}{{ firewall_blacklist_pos }}.rule"
    owner: root
    group: root
    mode: 0644
  when: firewall_blacklist is defined
  tags: firewall, configure, firewall:configure

- name: Create rule fragments
  template:
    src: rules.j2
    dest: "{{ firewall_rules_dir }}{{ (item.position|string).split()|first }}.rule"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{ firewall_rules }}"
    - "{{ firewall_default_rules|map_to_list('position', 'custom_rules') }}"
  tags: firewall, configure, firewall:configure

- name: Assemble rules
  assemble:
    src: "{{ firewall_rules_dir }}"
    dest: "{{ firewall_dir }}firewall.rule"
    owner: root
    group: root
    mode: 0644
  register: assembly
  tags: firewall, configure, firewall:configure

- name: Create loader script
  template:
    src: loader-script.j2
    dest: "{{ firewall_dir }}firewall-loader.sh"
    owner: root
    group: root
    mode: 0744
  tags: firewall, configure, firewall:configure

- name: Load rules and enable at startup
  service: name=firewall state=started enabled=yes
  tags: firewall, configure, firewall:configure
